from pydantic import BaseModel, Field
from typing import Literal, List, Optional

class CampaignInput(BaseModel):
    """Model for data sent from frontend form."""

    business_name: str = Field(..., description="Company or brand name.")
    product_service: str = Field(..., description="Description of product or service being promoted.")
    target_audience: str = Field(..., description="Detailed description of target audience.")

    campaign_goal: Literal['sales', 'engagement', 'traffic', 'awareness'] = Field(..., description="Main campaign goal.")
    desired_tone: Literal['professional', 'friendly', 'sarcastic', 'inspirational', 'humorous'] = Field(..., description="Desired communication tone.")
    campaign_theme: str = Field("", description="Optional key theme or slogan of the campaign.")
    num_posts: Literal[3, 4, 5] = Field(3, description="Desired number of unique post ideas (3-5).")

    class Config:
        # Allow using Pydantic as schema source for OpenAPI
        json_schema_extra = {
            "example": {
                "business_name": "ProForma Labs",
                "product_service": "Custom 3D prototypes from bioplastic",
                "target_audience": "Engineers and designers aged 30-45 who value sustainability",
                "campaign_goal": "awareness",
                "desired_tone": "professional",
                "campaign_theme": "Launch of new bioplastic PLA-Pro line",
                "num_posts": 3
            }
        }

class PostTopic(BaseModel):
    """Structure for a single post topic/idea generated by AI."""
    topic_title: str = Field(..., description="Short, attractive topic title, e.g.: 'Sales: Discount CTA'.")
    primary_message: str = Field(..., description="Main message to be conveyed in the post (1-2 sentences).")
    target_platform_focus: Literal['Instagram', 'LinkedIn', 'Facebook', 'X', 'General'] = Field(..., description="Recommended platform for this idea, if there is a priority.")

class StrategyBrief(BaseModel):
    """Final structured output from Strategy Agent."""
    campaign_summary: str = Field(..., description="Short strategy summary (3-5 sentences), created by AI based on input data.")
    post_topics: List[PostTopic] = Field(..., description="List of unique post ideas, the number of which matches the user's request.")

class PostOutput(BaseModel):
    """Final structure for a single post for all platforms."""
    
    # 1. Visual part
    image_prompt: str = Field(..., description="Detailed prompt for image generator (Midjourney/DALL-E), illustrating the topic.")
    image_url: Optional[str] = Field(None, description="URL of the generated image (optional, added when image generation is enabled)")
    
    # 2. Texts for platforms
    facebook_text: str = Field(..., description="Post text optimized for Facebook (medium length, call for discussion).")
    instagram_text: str = Field(..., description="Post text optimized for Instagram (short, visual-oriented, emojis, high readability).")
    linkedin_text: str = Field(..., description="Post text optimized for LinkedIn (professional, extended, focus on B2B value).")
    x_text: str = Field(..., description="Post text optimized for X/Twitter (very short, direct, no more than 280 characters).")
    
    # 3. Additional
    suggested_hashtags: str = Field(..., description="String with 5-10 most relevant, platform-adapted hashtags.")

class FinalCampaignOutput(BaseModel):
    """Final output that Frontend Dashboard will receive."""
    strategy_summary: str = Field(..., description="Short strategy campaign summary.")
    posts: List[PostOutput] = Field(..., description="List of all generated, ready-to-publish posts.")
